#!/bin/bash
 #@TODO: use this! #!/usr/bin/env bash

# also configurable via environement variables.
PUNCH_CARD=${PUNCH_CARD:-"~/.config/punchcard"}
PUNCH_DELIM=${PUNCH_DELIM:-'|'}

# change default conf above this line. ########################################
###############################################################################

E_ERROR=1
E_USAGE=64

# functions: ##################################################################
error() {
    echo -e "Error: ${@}" >&2
}

die() {
    exit ${1:-$E_ERROR}
}

help() {
    #print the regular usage
    usage

    #build the help sectoin
    declare -a HELP
    local i=0
    IFS=\0; for opt in ${!OPTS[@]}; do
        HELP[$i]=${opt/:/}
        ((++i))
    done
    i=0
    IFS=\0; for opt in ${OPTS[@]}; do
        local keyword=${opt%%  *}
        local explain=${opt/'__'/$keyword}
        HELP[$i]="-${HELP[$i]}\t${explain/  / - }"
        ((++i))
    done

    #print help section
    echo "\
    Help Section:" >&2
    for help in ${HELP[@]}; do
        echo -e "\t$help" >&2
    done

    die ${@}
}

usage() {
    local _n=$(basename $0)
    local flags=$(
        for opt in ${!OPTS[@]}; do
            [[ ${opt:1:1} = : ]] || echo -n $opt
        done
    )
    local i n
    local argflags=$(
        i=0
        for opt in ${!OPTS[@]}; do
            if [[ ${opt:1:1} = : ]];then
                echo -en "-${opt/:/} "
                n=0
                local boop=$IFS
                IFS=\0; for arg in ${OPTS[@]}; do
                    if (( n == i ));then
                        echo -en "${arg%% *} "
                        break;
                    fi
                    ((++n))
                done
                IFS=$boop
            fi
            ((++i))
        done
    )

    echo "$_n [$flags] [ $argflags[note...] ]
    Simple time card utility, lets you punch in, out and get paid.

    ${_n^} generally takes a client/subject of what you're working *for* and
    optionaly a quick note of what you're working *on*, then stores a timestamp
    on your local punch-card.

    Called with no arguments ${_n^} prints your current time on the clock.
    See -h for extended help message.
" >&2

    (( $# )) && die ${@}
}

# getops configuration: #######################################################
declare -A OPTS
OPTS=(
    [h]="Help message."
    [c:]="name  Punch in/out on for a client/project of '__'."
    [d:]="timestamp  Delete a time-card entry at '__'."
    [l]="List existing time-card entries."
)
while getopts ":$(for opt in ${!OPTS[@]}; do echo -n $opt ;done)" option; do
    case $option in
        c)
            error "-$option not yet implemented"
            die $E_ERROR
            ;;
        d)
            error "-$option not yet implemented"
            die $E_ERROR
            ;;
        h)
            help
            die
            ;;
        l)
            error "-$option not yet implemented"
            die $E_ERROR
            ;;
        \?)
            error "-$OPTARG is not a valid option. See -h for more."
            die $E_USAGE
            ;;
        :)
            error "-$OPTARG requires an argument. See -h for more."
            die $E_USAGE
            ;;
    esac
done

# logic: ######################################################################

#@TODO:
## make no-arg print of current time.
# make an option to have a clean print in epoch syntax

#@TODO:
# human readable print of total hours for a category
# clean epoch print of total hours for a category


#@TODO: remove this testing line!
error "the script has not yet been written :("
