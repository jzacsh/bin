#!/bin/bash
###############################################################################
# integrate the latest `git clone` of a given repo
#
# intended to run from /srv/http/inc/int
###############################################################################

# basic vars, change these: ###################################################
#change to non-zero to enable
opt_debug=0
opt_verbose=1

#exit codes:
EC_NORM=0 # normal
EC_FAIL=1 # irregular termination
EC_PIDF=2 # PID file error
EC_MIGR=3 # problem migrating files to live
EC_REPO=4 # git, ssh, or repository issue
EC_CONF=5 # configuration, startup issues
EC_AUTH=6 # some ssh authentication issue

usage() {
  echo "usage: ${0} conf_file"
  echo -e "\twhere conf_file is ascii providing necessary values"
  echo -e "\t[found at top script]"
  #@TODO: print explanation that "ficticious value"-set at top of script is
  # needed as seperate source file to be read at runtime
  exit $EC_CONF
}

#expecting replacement conf for below fictitious values
[[ -r $1 ]] && source $1 || usage
###############################################################################
## fiction start ##############################################################
# should expand to HostName github.com in ~/.ssh/config [see ssh_config(5)]:
git_server=${git_server:-github_serv}
git_repo=${git_repo:-${git_server}:jzacsh/anyproject}
git_sshkey=${git_sshkey:-/srv/http/inc/botname_id_rsa}
git_clone=${git_clone:-mess_dir-www}
http_dir=${http_dir:-/srv/http/www}
mess_dir=${mess_dir:-/tmp/}
## fiction end ################################################################
###############################################################################

# basic script setup ##########################################################
opt_debug=${opt_debug-0}
opt_verbose=${opt_verbose-0}
#if not set, perhaps this script is CD'd somewhere before run:
mess="${mess_dir-$PWD}"
runfile="$mess/.running"
git_land="$mess/$git_clone"
param='' #cleared and used as necessary

#colors:
col_end='\033[0m' #cap
col_blk='\e[0;30m'
col_red='\e[1;31m'
col_grn='\e[1;32m'
col_ylw='\e[1;33m'
col_blu='\e[1;34m'
col_wht='\e[0;37m'
#TOOD: wrap this "color" block in if statement in case run to a log file
fresh=0 #indication that the repo is not new, and is to be compared upstream
###############################################################################

# script helpers: #############################################################
if_debug() { (( $opt_debug > 0)) && return 0 || return 1; }
if_verbose() { (( $opt_verbose > 0)) && return 0 || return 1; }

cleanup() {
  dbg 'starting cleanup().'

  if [[ -f $runfile ]];then
    if [[ -w $runfile ]];then
      if_verbose && param='v' || param=''
      rm -f${param} $runfile
    else
      err "cannot delete pid file: $runfile"
      return $EC_PIDF
    fi
  else
    local error='cannot find below PID file (ehem, script should not have gotten this far)'
    err "$error:\n\t$runfile"
    return $EC_PIDF
  fi
}

die() {
  dbg "starting die(${col_red}${@}${col_end})."

  stamp "Exiting integration build of\n\t$git_repo"

  dbg "the following ${#} arg(s) were passed with die():\n${@}"

  #run general cleanup tasks
  local clean_fail

  # clean up PID file. dirty param, optional
  if [[ $2 = 'd' ]]; then
    printer 'leaving PID file behind.'
  else
    cleanup || clean_fail=$EC_PIDF
    dbg "\$clean_fail is: $clean_fail"
  fi

  dbg "\$clean_fail is: $clean_fail"

  # exit with optional error code param
  local number='^[0-9]+([.][0-9]+)?$'
  [[ $1 =~ $number || $1 -eq 0  ]] && exit $1 || exit ${clean_fail-$EC_FAIL}
}

printer() {
  echo -e "${col_grn}::${col_end} ${@}"
}

stamp() {
  printer "$(date --rfc-3339=seconds) ${col_ylw}::${col_end} ${@}"
}

err() {
  echo -e "${col_ylw}::${col_end} ${col_red}ERROR:${col_end} ${@}" >&2
}

verb() {
  if_verbose || return
  echo -e "${col_ylw}::${col_end} ${@}"
}

dbg() {
  if_debug || return
  echo -e "${col_ylw}::${col_end} ${col_blu}DEBUG:${col_end} ${@}"
}

conf_debug() {
  if_debug && echo || return
  dbg "starting conf_debug(${col_red}${@}${col_end}), settings debugger."

  case $1 in
    1)
      #just print variables
      dbg "mess dir is: $mess"
      dbg "run file is: $runfile"
      dbg "git repo is: $git_repo"
      dbg "ssh key is: $git_sshkey"
      dbg "git landing is: $git_land"
      ;;
    2)
      #test results of prep_env()
      dbg 'printing git server access'
      if_debug && ssh $git_server expand
      dbg 'printing all fingerprints in ssh agent'
      if_debug && ssh-add -l
      dbg 'finished conf_debug(), settings debugger.'
      ;;
    esac

    echo
}

# program functions: ##########################################################
prep_env() {
  dbg 'starting prep_env().'

  conf_debug 1

  verb 'creating PID file..'
  if [[ -f $runfile ]];then
    err "script (PID: $(cat $runfile)) still running or PID file was left behind.."
    die $EC_PIDF d
  else
    #create PID file
    echo "$$" > $runfile

    if [[ ! -f $runfile ]];then
      err 'problem creating PID file..'
      die $EC_PIDF
    fi
  fi

  verb "making sure PWD is the below expected location..\n\t$mess"
  cd $mess
  verb "current directory is: $PWD"

  verb "making sure the following ssh key is readable...\n\t$git_sshkey"
  if [[ -r $git_sshkey ]];then
    verb 'ssh key file exists and is readable.'
  else
    err "cannot read below ssh key file...\n\t$git_sshkey"
    die $EC_REPO
  fi

  local msg="ensuring the following 'landing directory' actually exists..."
  verb "$msg\n\t$git_land"
  if [[ -e $git_land ]]; then
    verb "landing directory found, continuing normally"
    dbg 'landing directory has `stat` of:'
    if_debug && stat $git_land
    dbg "\`fresh\` bool is currently: $fresh."
    dbg "marking current local repo status as NOT 'fresh'."
    fresh=0
    dbg "\`fresh\` bool is now: $fresh."
  else
    verb "no landing directory found"
    verb "cloning latest repo into landing directory"
    git clone $git_repo $git_land
    dbg "\`fresh\` bool is currently: $fresh."
    dbg "marking current local repo status as 'fresh'."
    fresh=1
    dbg "\`fresh\` bool is now: $fresh."
  fi

  conf_debug 2
}

get_latest() {
  dbg 'starting get_latest().'

  dbg "\`fresh\` bool is: $fresh."

  if [[ $fresh -eq 0 ]]; then
    # local repo is not "fresh" (already exists). We can assume integration has
    # been done before, and will simply check for upstream changes.
    _compare_latest
  else
    # if local repo is fresh, script wil continue in main integrate the latest
    verb 'local repo seems to have just been built, moving on to integration'
  fi
}

_compare_latest() {
  dbg 'starting _compare_latest().'

  if [[ -d $git_land && -w $git_land ]];then
    verb 'entering local repo...'
    cd $git_land
    verb 'comparing to upstream...'
    local commits="$(git fetch && git log ..origin/master | grep ^commit)"
    if [[ -z $commits ]]; then
      #exit early, no updates available
      verb 'Nothing to do. No upstream changes available.'
      die $EC_NORM
    else
      #updates available
      verb "the following upstream updates available\n$commits"
      verb 'starting `git` pull...'
      git pull origin master
    fi
  else
    #cannot access local repo
    local error='Unable to access the following (local repo), checked with `-d` and `-w`'
    err "$error\n\t$git_land"
    die $EC_MIGR
  fi
}

build_live() {
  dbg 'starting build_live()'

  if_verbose && param='v' || param=''
  if [[ -r $git_land ]] && [[ -w $http_dir ]];then
    local msg='copying latest build into live http docs...'
    verb "$msg\n\tfrom $git_land -> $http_dir"
    for file in $git_land/*; do
      cp -r${param} $file $http_dir/
    done

    verb 'copying any hidden files, as well...'
    for file in $git_land/.*; do
      local b=$(basename $file)
      if [[ $b = '.' ]] || [[ $b = '..' ]] || [[ $b = '.git' ]];then
        dbg "skipping suspect file: $file"
      else
        dbg "copying: $file"
        cp -r${param} $file $http_dir/
      fi
    done
    verb 'file integration complete'
  else
    err 'improper permissions for latest fetch and/or http docs directory.'

    #debugging block
    if [[ if_verb ]]; then
      #check read permissions from local repository
      if [[ -r $git_land ]];then
        verb "improper read permissions to following landing dir/\n\t$git_land"
        verb '`stat`s appear to be:'
        if_verb && stat $git_land
      fi

      #check write permissions to http directory
      if [[ -w $http_dir  ]];then
        verb "improper write permissions to following httpd dir/\n\t$http_dir"
        verb '`stat`s appear to be:'
        if_verb && stat $http_dir
      fi
    fi

    die $EC_MIGR
  fi
}

trap die SIGINT
# main sequence: ##############################################################
stamp "Starting integration build of\n\t$git_repo"
prep_env
get_latest
build_live
stamp "Cleaning up integration build of\n\t$git_repo"
clean_key
cleanup
