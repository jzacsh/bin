#!/usr/bin/env python
import sys, os, urllib, getpass, datetime

class ImporterAccounts:
    """Generic base-class to handle imports to ledger's format from various popular banks."""
    def __init__(self):
        self.accts=('Checking', 'Saving')
    def prompt_creds(self):
        """Get user's credentials for a given bank login."""
    def download_export(self, type='csv'):
        """Download the latest bank history exported as file TYPE"""

class ImporterTdbank(ImporterAccounts):
    """Handle import of various TDBank banking accounts."""
    def __init__(self, usr=getpass.getuser(), pas=None):
        self.creds = {'usr': usr}
        stamp = datetime.datetime.utcnow()
        stamp = datetime.datetime.isoformat(stamp)
        stamp = stamp.replace('T', '_').replace(':', '').replace('.', '-')
        self.save_as = os.getcwd() + '_' + stamp
        self.bank = {
            'name': 'TD Bank',
            'url': 'https://onlinebanking.tdbank.com/',
            #make this whole structure come in via conf files.
        }
        self.creds['pas'] = None #learn python's getopts and make this possible

    def prompt_creds(self):
        print 'Enter your credentails (ENTER for [default] values).'
        usr = raw_input('\tusername ["%s"]: ' % (self.creds['usr']))
        if usr: self.creds['usr'] = usr

        while True:
            self.creds['pas'] = getpass.getpass('\tpassword: ')
            if self.creds['pas']:
                break
            else:
                sys.stderr.write("Error: could not read password.")

        #@TODO: more concise approach to this?
        if not self.creds['usr']: return False
        if not self.creds['pas']: return False

        return True

    #just fiddling around:
    def _http_post_request(self):
        s = urllib2.urlopen(self.bank['url'])
        s.close()
        return s.read()

    def download_export(self, output=None, type='csv'):
        """Download the latest TDBank history exported as file TYPE"""
        print "Preparing to download history export."
        if not self.prompt_creds():
            sys.stderr.write("Error: could not interpret username/password.\n")
            sys.exit(1)
        if output:
            self.save_as = output
        else:
            save_as = raw_input("Path of download export file?\n\t['%s']: " % (self.save_as))
            if save_as: self.save_as = save_as


if __name__ == '__main__':
    tdbank = ImporterTdbank()
    tdbank.download_export()

    print 'Getting exports for "%s"...' % (tdbank.bank['name'])
