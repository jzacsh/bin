#!/usr/bin/env python
import sys, os, urllib, getpass, datetime

class ImporterAccounts:
    """Generic base-class to handle imports to ledger's format from various popular banks."""
    def __init__(self):
        self.accts = ('Checking', 'Saving')
        self.open_socket = None
    def prompt_creds(self):
        """Get user's credentials for a given bank login."""
    def download_export(self):
        """Download the latest account history export."""

class ImporterTdbank(ImporterAccounts):
    """Handle import of various TDBank banking accounts."""
    def __init__(self, usr=getpass.getuser(), pas=None):
        ImporterAccounts.__init__(self) #@TODO: how do i do this properly??
        self.creds = {'usr': usr, 'pas': pas}
        self.bank = {
            #make this whole structure come in via conf files.
            'name': 'TD Bank',
            'url': {
                'home': 'https://onlinebanking.tdbank.com/',
                'login': 'https://onlinebanking.tdbank.com/onlinebanking.tdbank.com/login.asp',
                'export': 'https://onlinebanking.tdbank.com/qif.asp',
                },
            }
        _stamp = datetime.datetime.utcnow()
        _stamp = datetime.datetime.isoformat(_stamp)
        _stamp = _stamp.replace('T', '_').replace(':', '').replace('.', '-')
        _prefix = self.bank['name'].lower().strip().replace(' ', '-')
        self.export = {
                'save_as': os.getcwd() + '/' + _prefix + '_' + _stamp,
                'format': None,
                }

    def prompt_creds(self):
        print 'Enter your credentails (ENTER for [default] values).'
        usr = raw_input('\tusername ["%s"]: ' % (self.creds['usr']))
        if usr: self.creds['usr'] = usr

        while True:
            self.creds['pas'] = getpass.getpass('\tpassword: ')
            if self.creds['pas']:
                break
            else:
                sys.stderr.write("Error: could not read password.")

        #@TODO: more concise approach to this?
        if not self.creds['usr']: return False
        if not self.creds['pas']: return False

        return True

    #just fiddling around:
    def _http_post_request(self):
        s = urllib.urlopen(self.bank['url']['home'])
        s.close()
        return s.read()

    def prep_download(self, output=None, download='csv', acct=None):
        """Download the latest TDBank history exported as file TYPE"""
        print "Preparing to download history export."

        #get username/password
        if not self.prompt_creds():
            sys.stderr.write("Error: could not interpret username/password.\n")
            return False

        #get account to download for
        if acct:
            self.export['acct'] = acct
        else:
            print "Account type to download history for."
            for i, _type in enumerate(self.accts): print "\t[%s]: %s" % (i+1, self.accts[i])
            while True:
                try:
                    selection = raw_input("\tacct: ")
                    self.export['acct'] = self.accts[int(selection) - 1]
                    break
                except IndexError:
                    sys.stderr.write("\tError: %s is not in the menu.\n"
                            % (selection))
                except ValueError:
                    sys.stderr.write("\tError: please choose a number in the menu (1-%s).\n"
                            % (len(self.accts)))
        print "::Will download history for: '%s' account." % (self.export['acct'])

        #file format to download
        if download:
            self.export['format'] = download
        else:
            while True:
                download = raw_input("Preferred file-type extension of export from %s? ['%s']: "
                        % (self.bank['name'], self.export['format']))
                if download:
                    self.export['format'] = download
                    break
        print "::Format set to: %s" % (self.export['format'])

        #"Save As.." path
        if output:
            self.export['save_as'] = output
        else:
            save_as = raw_input("Path of download export file?\n\t['%s']: " %
                    (self.export['save_as']))
            if save_as: self.export['save_as'] = save_as
        print "::Download will be: %s" % (self.export['save_as'])

        return True

    def get_current_data(self):
        #@TODO: connect and scrape away
        post_data = urllib.urlencode({
            'name': self.creds['usr'],
            'pin': self.creds['pas'],
            })
        self.socket = urllib.urlopen(self.bank['url']['login'], post_data)

        #@TODO: remove me! just testing
        print self.socket.read()
        sys.exit(99)

        return {
                'AccountNumber': None, #@TODO: scrape from page
                'BankID': None, #@TODO: scrape from page
                'totalBal': "$" + None, #@TODO: scrape from page
                'acctLedgerBal': "$" + None, #@TODO: scrape from page
                'acctHostAcct1':  None, #@TODO: scrape from page
                }

    def download_export(self):
        if not self.prep_download():
            sys.stderr.write("Error: could not prepare for download.\n")
            sys.exit(1)

        self.current = self.get_current_data()

        post_data = urllib.urlencode({
                'format': self.export['format'],
                'from': "", #@TODO: ?needed?
                'to': "", #@TODO: ?needed?
                'AccountNumber': self.current['AccountNumber'],
                'BankID': self.current['BankID'],
                'fullAcctType': "Deposit", #@TODO: what???
                'acctType': self.export['acct'],
                'totalBal': "$" + self.current['totalBal'],
                'acctLedgerBal': "$" + self.current['acctLedgerBal'],
                'viewPS': "none",
                'acctDispType': "D",
                'acctHost2': self.export['acct'].upper(),
                'acctHostAcct1': self.current['acctHostAcct1'],
                'acctHostType': "IM",
                'selSearch': "all",
                })
        export = urllib.urlopen(self.bank['url']['export'], post_data)
        return

if __name__ == '__main__':
    tdbank = ImporterTdbank()
    tdbank.download_export()

    print 'Getting exports for "%s"...' % (tdbank.bank['name'])
