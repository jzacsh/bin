#!/usr/bin/env bash
#
# Run all env. `export` statements
#
# NOTE: This is intended to be run from inside ~/.bashrc (yes, nested shells).

isAlreadyExported() { env | grep "^${1}=" >/dev/null 2>&1; }

# re-prints "$@" colon delimeted, eg: "$1:$2:$3"
concatWithColons() { printf '%s:' $@ | sed -e 's,:$,,'; }

# Hacks to somewhat allow "export ENV=...." to be run a million times without
# making a mess.
#
# $1=env var to export (eg: PYTHONPATH)
# $@=strings to colon-delimited prepend (eg: /my/pylib /sys/pylib)
exportPrependedOnce() {
  local env_var to_prepend existing_val
  env_var="$1"; shift

  to_prepend="$(concatWithColons "$@")"
  existing_val="$(eval echo -n "\$$env_var")"

  # Only prepend our env. vars if we haven't *already*
  isAlreadyExported "$to_prepend" && return # nothing to do

  local toExport="$to_prepend"
  [ -n "$existing_val" ] && toExport="$toExport:$existing_val"
  export "${env_var}=$toExport"
}


# Static/vanilla (not appending) env vars:
export CSCOPE_DB=$HOME/.vim/cscope.out
export COWER='cower --color=auto'
export BROWSER=w3m
export SHOT_PUB='shot'
export SHOT_UPLOAD='ompload'
export TTS_CONFIG=~/.ttskeyrc
export PASTIE='dpaste'
export EDITOR=vim
export DIFF=' up '
export LESS=' XFRr '
export RLWRAP=' AaN '
export PAGER=less
export RUBYOPT='w' #helpful ruby warnings
export GREP_OPTIONS='--color=auto'
export GOPATH="$HOME/usr/lib/go/"

exportPrependedOnce 'PATH' \
  "$HOME/bin" \
  "$HOME/bin/local" \
  "$HOME/bin/share" \
  "$HOME/bin/dist" \
  "$HOME/bin/lib" \
  "$HOME/usr/lib/go/bin/" \
  "$HOME/usr/local/bin/android/sdk/platform-tools" \
  "$HOME/usr/local/bin/android/sdk/tools" \
  "/usr/local/go/bin"
exportPrependedOnce 'CLASSPATH' "$HOME/var/edu/princenton/algs4/"
exportPrependedOnce 'PYTHONPATH' "$HOME/usr/lib/python/"
exportPrependedOnce 'NODE_PATH' \
  "/usr/local/lib/node_modules/" \
  "/usr/lib/node/"


unset isAlreadyExported
unset concatWithColons
unset exportPrependedOnce
