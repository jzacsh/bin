#!/usr/bin/env bash
#
# Run all env. `export` statements
#
# NOTE: This is intended to be run from inside ~/.bashrc (yes, nested shells).

# Hacks to somewhat allow "export ENV=...." to be run a million times without
# making a mess.
#
# $1=env var to export (eg: PYTHONPATH)
# $@=strings to colon-delimited prepend (eg: /my/pylib /sys/pylib)

exportPrependedOnce() {
  set +u
  local env_var="$1";shift

  # TODO make this safe to run in script that has `set -u` -- ie: temporarily
  # unset it if it's set

  local to_prepend="$(
    local -a found=( $(printf "${!env_var}" | tr : '\n') )
    local isFirst=1

    local part
    for part in $@; do
      printf '%s\n' "${found[@]}" | grep "$part" >/dev/null 2>&1 &&
          continue

      (( isFirst )) || printf ':'
      isFirst=0

      printf '%s' "$part"
    done
  )"

  [ -z "$to_prepend" ] && return  # nothing new

  local toExport="$to_prepend"
  [ -n "${!env_var}" ] && toExport="$toExport:"${!env_var}""

  export "${env_var}=$toExport"
}

# Static/vanilla (not appending) env vars:
# EDITOR= is set atop normal ~/.bashrc
if type nvim >/dev/null 2>&1;then export EDITOR=nvim;fi
export EMAIL=jzacsh@gmail.com
export GPG_TTY="$(tty)"
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export CSCOPE_DB=$HOME/.vim/cscope.out
export COWER='cower --color=auto'
export BROWSER=w3m
export SHOT_PUB='shot'
export SHOT_UPLOAD='ompload'
export TTS_CONFIG=~/.ttskeyrc
export PASTIE=clbin
export GOPATH="$HOME/usr/lib/go/"
export GRADLE_USER_HOME="$XDG_CONFIG_HOME"/gradle/
export ECLIPSE_HOME="$HOME"/back/code/ide/eclipse/installations/java-mars
export ANDROID_HOME="$HOME"/usr/local/bin/android/sdk
export PUNCH_CARD="$(xdg-user-dir DOCUMENTS)/punchcard"

# ssh-agent (eval'd by typical bashrc) exposes the correct, current socket via
# $SSH_AUTH_SOCK; below lines of code relocate that file to an expected path
#
#TODO: maybe use $XDG_RUNTIME_DIR instead?
#TODO(untested) below is commented out because i'm trying to figure out how to
#work _with_ gnome a bit more, but i've not yet tested how this new world
#behaves with tmux complexity ... so one thing at a time
#
# if [[ "${SSH_AUTH_SOCK:-x}" != x ]];then
#   if [[ -e "$SSH_AUTH_SOCK" ]];then
#     tmuxSshSock="${TMPDIR:-"$HOME"/.ssh}"/ssh-auth-sock.tmux
#     if [[ "$(readlink -f "$SSH_AUTH_SOCK")" != "$(readlink -f "$tmuxSshSock")" ]];then
#       was="$SSH_AUTH_SOCK"
#       rm -f "$tmuxSshSock"
#       ln -sf "$SSH_AUTH_SOCK" "$tmuxSshSock"
#       export SSH_AUTH_SOCK="$tmuxSshSock"
#       printf \
#         '[WARN] stabalized $SSH_AUTH_SOCK; was "%s", is now (via symlink) "%s"\n' \
#         "$was" "$SSH_AUTH_SOCK" >&2
#     fi
#     unset tmuxSshSock
#   else
#     export SSH_AUTH_SOCK=''
#   fi
# fi

# prefer source highlighting over archive inspection
if type zacsh-highlight > /dev/null 2>&1;then
  export LESSOPEN="| $(type -p zacsh-highlight) %s"
elif type pygmentize >/dev/null 2>&1;then
  if echo $TERM | grep 256 >/dev/null 2>&1;then
    # For more, see /usr/share/doc/python-pygments/formatters.html
    termOpt=' -f terminal256 '
  else
    termOpt=''
  fi
  export LESSOPEN="| pygmentize -g $termOpt %s"
  unset termOpt
elif type source-highlight >/dev/null 2>&1;then
  export LESSOPEN='|source-highlight --data-dir=${TMPDIR:-/tmp/} %s'
elif type lesspipe >/dev/null 2>&1;then
  export LESSOPEN='|lesspipe %s'
fi

exportPrependedOnce 'PATH' \
  "$HOME/bin" \
  "$HOME/bin/local" \
  "$HOME/bin/share" \
  "$HOME/bin/dist" \
  "$HOME/bin/lib" \
  "$GOPATH/bin" \
  "$HOME/.local/bin/" \
  "$HOME/usr/local/bin/android/sdk/platform-tools" \
  "$HOME/usr/local/bin/android/sdk/tools" \
  "$HOME/usr/local/bin/android/studio/bin" \
  "$HOME/usr/local/bin/valgrind/bin" \
  "/usr/local/go/bin/" \
  "$HOME/.rbenv/shims"

exportPrependedOnce 'PYTHONPATH' "$HOME/usr/lib/python"
exportPrependedOnce 'NODE_PATH' \
  "/usr/local/lib/node_modules" \
  "/usr/lib/node"


unset exportPrependedOnce
