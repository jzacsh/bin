#!/usr/bin/env bash

ex_env=/usr/bin/env
ex_grep=/bin/grep

# Hacks to somewhat allow "export ENV=...." to be run a million times without
# making a mess.

# This is intended to be run from inside ~/.bashrc (yes, nested shells).

get_env() {
  # NB: if figure out why executables aren't in _global_ path by now, then fix
  # and delete this function.
  $ex_env | $ex_grep $1
}

export_once() {
  local env_var to_prepend existing_val
  env_var=$1
  to_prepend=$2
  existing_val=$(get_env "^${env_var}=")

  # Only prepend our env. vars if we haven't *already*
  if ! { get_env "$to_prepend" >/dev/null 2>&1; }; then
    # Prepend to existing env vars, if env. vars exist, otherwise, simply
    # export.
    # see: man bash | less +/\:\+
    export "$env_var"="${to_prepend}${existing_val:+":$existing_val"}"
  fi
}


# Static/vanilla (not appending) env vars:
export CSCOPE_DB=$HOME/.vim/cscope.out
export COWER='cower --color=auto'
export BROWSER=w3m
export SHOT_PUB='shot'
export SHOT_UPLOAD='ompload'
export TTS_CONFIG=~/.ttskeyrc
export PASTIE='dpaste'
export EDITOR=vim
export DIFF=' up '
export LESS=' XFRr '
export RLWRAP=' AaN '
export PAGER=less
export RUBYOPT='w' #helpful ruby warnings
export GREP_OPTIONS='--color=auto'

# The solution is to check if _appending_ ENV. variables are appending
# unnecessarily.
export_once 'PATH' \
  "$HOME/bin:$HOME/bin/local:$HOME/bin/share:$HOME/bin/dist:$HOME/bin/lib:$HOME/usr/local/bin/androidsdk/platform-tools:$HOME/usr/local/bin/androidsdk/tools:/usr/local/go/bin"
export_once 'CLASSPATH' "$HOME/var/edu/princenton/algs4/"
export_once 'PYTHONPATH' "$HOME/usr/lib/python/"
export_once 'NODE_PATH' "/usr/local/lib/node_modules/:/usr/lib/node/"


unset export_once
unset get_env
