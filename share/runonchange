#!/usr/bin/env bash
set -e
declare -r cmd="$1"
declare -r watchTarget="$2"
declare -r handleDelay=1

_fn="${0,,}"; usage() {
  local usageMsg='usage: `%s` "some build cmd" SOME_DIR [GREP_INVERT_STR]\n\n'
  usageMsg+='\tSOME_DIR defaults to cwd\n'
  usageMsg+='\tGREP_INVERT_STR allows for additional expressions to\n'
  usageMsg+='\t\tignore when watching a directory\n'
  printf "$usageMsg" "$(basename "$_fn")" >&2
  exit 1
}
{
  [ -n "$watchTarget" ] &&
    [ -n "$cmd" ] &&
    [ -d "$watchTarget" ] &&
    [ -r "$watchTarget" ]
} || usage

declare -A clr=(
  [end]='\033[0m'
  [blk]='\e[0;30m'
  [red]='\e[1;31m'
  [grn]='\e[1;32m'
  [ylw]='\e[1;33m'
  [blu]='\e[1;34m'
  [wht]='\e[0;37m'
)
col() { _clr=$1; shift; echo -en "${clr[$_clr]}$@${clr[end]}"; }

captureChanges() {
  set +e
  bash -c "set -euo pipefail; $cmd";
}

msg='\n'${clr[ylw]}'RUNNING'${clr[end]}'\t`%s` for changes to %s\n\n'
printf "$msg" "$(col red "$cmd")" "$(col grn "$watchTarget")"

captureChanges  # ... kick things off for show

declare -r handleMsg='\n\n
'${clr[red]}'HANDLING'${clr[end]}' change %d seconds ago to "%s"...\n$`%s`\n\n'

excludeRule="$3"
shouldSkipFile() {
  [ -n "$excludeRule" ] && [ -z "$(echo -n "$1" | grep --invert-match --extended-regexp "$excludeRule")" ]
}

# handles event at $1 timestamp, for file $2
handleEvent() {
  local since; since="$(secondsSince $1)"
  printf "$handleMsg" $since "$2" "$cmd"
  captureChanges
}
# has it been $1 seconds since $2 timestamp
hasBeen() { [ "$(printf '%d >= %s\n' $(secondsSince $2) $1 | bc)" -eq 1 ]; }
secondsSince() {
  local then=$1; local now; now=$(date +%s)
  printf '%d - %d\n' $now $then | bc
}

declare -a poolOfChgTimes=()
poolChanges() {
  poolOfChgTimes+=($1)
  printf '.' # "pooling..."-indicator
  sleep $handleDelay

  [ ${#poolOfChgTimes} -gt 1 ] || return  # already handled

  if hasBeen $handleDelay ${poolOfChgTimes[0]};then
    handleEvent ${poolOfChgTimes[0]} $2
    poolOfChgTimes=()
  fi
}

didOldSkip=0
didFileSkip=0
inotifywait \
  --monitor \
  --event=attrib \
  --recursive \
  --exclude='^\.\w*.*\.s[a-w][a-z]$' \
  --timefmt='%s' \
  --format='%T %f' "$watchTarget" |
while read chngTime file foo; do
  if hasBeen $handleDelay $chngTime;then
    # silently skip changes for ignored *and* late files
    if shouldSkipFile "$file";then printf '.' >&2; continue; fi

    if (( didOldSkip ));then
      if (( didOldSkip > 40 ));then
        didOldSkip=0
        printf '\n\t\t' >&2
      else
        printf ', ' >&2
      fi
    else
      printf \
        "\tskipping old change; at least %d second(s) late to party:\n\t\t" \
        $handleDelay
    fi

    msg="$(printf '%d sec ago: "%s"' $(secondsSince $chngTime) "$file")"
    printf "$msg" >&2
    didOldSkip=$(( didOldSkip + ${#msg} )); continue
  fi

  if shouldSkipFile "$file";then
    if (( didFileSkip ));then
      if (( didFileSkip > 40 ));then
        didFileSkip=0
        printf '\n\t\t' >&2
      else
        printf ', ' >&2
      fi
    else
      printf \
        '\tskipping file seemingly excluded by rule: "%s":\n\t\t' \
        "$excludeRule" >&2
    fi

    printf '"%s"' "$file" >&2
    didFileSkip=$(( didFileSkip + ${#file} )); continue
  fi

  didOldSkip=0
  didFileSkip=0
  poolChanges $chngTime "$file"
done
