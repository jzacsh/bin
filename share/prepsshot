#!/usr/bin/env bash
set -euo pipefail

declare -r maxWidth=900

declare -a deps=(
  cwebp
  exiftool
  detox
); declare -r deps

for dep in "${deps[@]}";do
  if type "$dep" >/dev/null 2>&1;then continue;fi
  printf 'Error: require `%s` util\n' "$dep" >&2
  exit 1
done

declare -r acceptedOpts='ks' # getopts first argument
this="$(basename "$(readlink -f "${BASH_SOURCE[0]}")")"; declare -r this
usage() (
  printf '
  usage: %s [-%s] IMAGE_FILE [IMAGE_TWO ...]

    For each IMAGE_FILE creates a copy that:
    - is stripped of potentialy embedded PII
    - renamed for long-term storage
    - shrinked for efficient sharing, unless -s is passed
    - converted to webp, unless -k is passed
  ' "${this,,}" "$acceptedOpts"
)

declare -A opts=( [k]=0 )
while getopts "$acceptedOpts" flag;do
  case "$flag" in
    k) opts["$flag"]=1;;
    s) opts["$flag"]=1;;
    *)
      printf -- \
        'Error: Unrecognized flag, expected one of: "%s". See usage:\n%s\n' \
        "$acceptedOpts" "$(usage)" >&2
      exit 1
      ;;
  esac
done
shift $(( $OPTIND - 1 ))
declare -r opts

[ "$#" -gt 0 ] || { printf 'Error: need images\n%s\n' "$(usage)" >&2; exit 1; }

outDir="$(mktemp --tmpdir  --directory "$this"_imgconversions_XXXXX.d)"
declare -r outDir

scrapeDetoxName() (
  local bench="$outDir"/.detoxbench/
  [ -d "$bench" ] || mkdir "$bench"

  find "$bench" -mindepth 1 -type f -exec rm {} +; # cleanup old cruft

  local dummyFile="$bench"/"$1"
  touch "$dummyFile" # create dummy file
  detox "$dummyFile" # rename

  find "$bench" -mindepth 1 -type f -printf '%P\n' # print new name

  find "$bench" -mindepth 1 -type f -exec rm {} +;
)

isReadableNonemptyFile() (
  [ -r "$1" ] && [ -f "$1" ] && [ "$(stat --printf='%s' "$1")" -gt 0 ]
)

preporig() (
  local orig; orig="$1"
  isReadableNonemptyFile "$orig" || {
    printf \
      'skipping: expected regular, readable, non-empty file:\n\t%s\n' \
      "$orig" >&2
    return
  }
  in_img="$(readlink -f "$orig")"

  outName="$(scrapeDetoxName "$(basename "$orig")")"
  outName="$(date --iso-8601=d)_${outName}"

  stripped="$outDir"/"$outName"
  cp "$in_img" "$stripped"
  exiftool -overwrite_original -quiet -all=  "$stripped"

  outPath="$outDir"/stripped_"$outName"
  cp "$stripped" "$outPath" # baseline, in case nothing below runs
  if (( opts[k] ));then
    (( opts[s] )) ||
      convert -resize "$maxWidth" "$stripped" "$outPath"
  else
    # TODO it *seems* cwebp already strips exif data. verify this and remove
    # `exiftool` usage
    resizeOpt=''
    (( opts[s] )) ||
      resizeOpt=" -resize "$maxWidth" 0 "
    cwebp -quiet $resizeOpt "$stripped" -o "$outPath".webp
  fi
  rm "$stripped"

  printf -- \
    'generated %s from %s\n' \
    "$(basename "$(if [ -e "$outPath" ];then echo "$outPath"; else echo "$outPath".webp; fi)")" \
    "$(basename "$in_img")"
)

# TODO figure out what goes wrong when backgrounding preporig
for orig in "$@";do preporig "$orig"; done

# list successes
# find "$outDir" -mindepth 1 -maxdepth 1 -type f -print
