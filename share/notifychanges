#!/usr/bin/env bash
declare -r depends=(inotifywait)

opt_useStdout=0
if [ "$#" -gt 0 ] && [ "$1" = '-s' ];then
    opt_useStdout=1
    shift;
fi

declare -r scriptName="$(basename "$(readlink -f "${BASH_SOURCE[0]}")")"
declare -r opt_dirToWatch="${1:-.}"

usage() {
    printf '
    Notifies you of changes to file under a given directory, using libnotify.

    Usage: %s [-s] [DIRECTORY_TO_WATCH]
        - DIRECTORY_TO_WATCH is the name of a directory whose changes
        notifications should be created for. Defaults to the current directory.

        -s  Indicates that messages should be printed to stdout instead of the
        default notify-send(1) or zenity(1).

    Example usage:
       `%s ~/pub/drop`

       `%s -s ~/pub/drop | while read notification; do /bin/feed-hamster; done`

    See: notify-send(1) http://github.com/rvoicilas/inotify-tools
    See: inotifywait(1) http://www.galago-project.org
    \r' "$scriptName" "$scriptName" >&2
    exit 2
}

#
# dependencies/usage checking
#

haveBin() { type "$1" >/dev/null 2>&1; }
missingBin() { printf 'Error: %s missing, but required\n' "$1" >&2; usage; }
[ "$1" = '--help' ] || [ "$1" = '-h' ] && usage
for util in "${depends[@]}"; do haveBin "$util" || missingBin "$util"; done
{ [ "$opt_useStdout" -eq 0 ] && ! haveBin zenity && ! haveBin notify-send; } &&
    missingBin 'zenity or notify-send'

# if inotifywait is passed a non-existent directory,
# it goes into a monsterous infinate loop instead of failing.
{ [ -r "$opt_dirToWatch" ] && [ -d "$opt_dirToWatch" ]; } || {
    printf 'Error: cannot find "%s" in filesystem\n' "$opt_dirToWatch" >&2
    exit 3
}

#
# actual functional logic
#

notify() {
    if haveBin notify-send; then
        notify-send "$1"
    elif haveBin zenity; then
        zenity --notification --text="$1"
    fi
}

inotifywait \
    --recursive \
    --monitor \
    --timefmt='%H:%M:%S' \
    --format='%T (%e) | "%f"' \
    --event delete \
    --event move \
    --event create \
    --event modify \
    --quiet \
    "$opt_dirToWatch" | {
    if [ "$opt_useStdout" -eq 0 ];then
        while read -r message; do notify "$message"; done
    else
        cat /dev/stdin
    fi
}
