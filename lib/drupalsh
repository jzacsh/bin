#!/usr/bin/env bash

#
# functions and helpers made specifically for drupal development
#

#quick launch for http://dgo.to/, incase the URI isn't easy enough
dgo() {
  #see http://dgo.to/ for possible params
  local param="$1"
  local search="${*}"
  if [[ ${param:0:1} == "-" ]];then
    local key="$(echo $param | sed -e 's/.//')/"
    search="${@:2}"
  else
    local key='' #default search projects
  fi
  $BROWSER "http://dgo.to/${key}${search}"
}

#toggle `devel_themer` module on and off
alias themer?='drush pm-list | grep -i "devel_themer"' #check
themer() {
  local nm='devel_themer'
  [[ $(drush pm-list | grep ${nm} | grep 'Enabled') ]] && drush -y dis ${nm} || drush -y en ${nm}
}

#clear and re-run `tail -f` of dd()'s output
cleardd() {
  local uid
  # default values
  local def_file="/tmp/drupal_debug.txt"
  local def_uid="33" #uid for www-data

  # set values
  [[ -z ${1} ]] && echo "no params defaulting to: ${def_file}"
  local file=${1:-$def_file} #default param
  local file_uid=$(stat -c %u ${file} 2>/dev/null)
  [[ $file_uid -eq 0 ]] && unset file_uid #avoid root owned file
  uid=${file_uid:-$def_uid}

  # actual actions
  echo -e "using owner uid: ${uid}\n" #debug info
  file ${file} >&/dev/null && sudo rm -v ${file} #empty out existing file
  sudo -u#${uid} touch ${file} && tail -f ${file}
}

#drupal cvs
dcvs() {
  #TODO make larger for diffs, gets, etc.
  if [[ -z $1 ]];then
    echo -e "usage: dvcs module_name\n\tloads a drupal contrib module, module_name, from CVS HEAD." >&2
    return 1
  fi

  local module_name="$1"
  shift

  cvs -z6 -d:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib\
    checkout "contributions/modules/$module_name" ${@} #allow extra arguments
}

# `features` updates.
# easily do a the equivelent of `drush features update`, but with *new*
# tarballs that the features interface has given you.
fu() {
  local dbg=
  if [[ $(echo ${1} | grep tar$) ]];then
    [[ $dbg ]] && echo "DEBUG: found tarball to be ${download}"
    local download=$1
  else
    echo -en 'usage: fu feature_name-X.x-#.#.tar\n'
    echo -en ' eg.: step 1: `cd /path/to/exact/feature/` \n'
    echo -en '      step 2: `cp /path/to/tarball .` \n'
    echo -en '      step 3: `fu ./name-of-tarball` \n'
    return 1
  fi

  echo -en 'unpacking feature: \n'
  tar xvf ${download}
  echo -en 'finished unpacking.\n'

  echo -en '\nupdating feature:\n'
  local feature=$(tar tf $download | sed -e '1s|/.*$|/|;q')
  # sanity check:
  local current="$(pwd | sed -e 's|.*/||g')/"
  if [[ $current != $feature ]]; then
      echo -en 'looks like you are unpacking in the WRONG directory....\n'
      echo -en "  feature being unpacked: $feature\n"
      echo -en "  your current directory: $current\n"
      echo -en 'Are you SURE you want to continue? [y/N] '; read answ
      [[ $answ == 'y' || $answ == 'Y' ]] || return 1
  fi
 
  [[ $dbg ]] && echo "DEBUG: found local directory to be: ${feature}"
  for file in $(find $feature -type f);do
    [[ $dbg ]] && echo "DEBUG: found local directory to be: ${feature}"
    mv -v $file $(echo $file | sed -e "s|$feature||")
  done
  echo -en 'finished updating.\n'

  echo -en "\njunk: ${feature} ${download} \n"
  echo -en 'cleanup junk, here? [Y/n] '; read answ
  if [[ $answ == 'n' || $answ == 'N' ]]; then
    return 0
  else
    rm -rfv ${download}
    rm -rfv ${feature}
  fi
}

